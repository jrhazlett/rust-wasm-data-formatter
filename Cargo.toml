[package]
name = "rust-wasm-data-formatter"
version = "0.1.0"
authors = ["James <james@jameshazlett.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib"] # Removing rlib shaves off about 0.2 milliseconds

[features]
default = ["console_error_panic_hook"]

[dependencies]
js-sys = "0.3.61"
rustc-hash = "1.1.0" # 0.4 millisecond improved performance
wasm-bindgen = "0.2.84"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

#default - Just leaving rust's default allocator seems to provide a 0.1 millisecond performance improvement.
#lol_alloc = { version = "0.3.0", optional = true } # This is an indy alloc; no significant performance boost
#wee_alloc = { version = "0.4.5", optional = true } # This has a known memory leak and appears to be dead

[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[profile.release]
codegen-units = 1 # Optimize crate as a single unit
lto = "fat" # Prioritize speed over making smaller
opt-level = 3 # Prioritize speed over making smaller
panic = "abort" # Turn off stack trace

# Having these settings seem to result in slower execution times
#debug = 0
#debug-assertions = false
#overflow-checks = true # Setting this to false actually lowers performance
#rpath = false
#strip = "symbols"
















































